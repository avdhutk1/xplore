'''
Created on 04-Apr-2018

@author: avdhut
'''
'''
1. function definition can be done in two ways - def and lambda:
def creates an object and assigns the function name
def can be defined in-line in a if statement
def is created the first time it is invoked
lamda also creates an object but returns it as a result. It is used in-line where def cannot be defined
2. two ways to send result back to caller - return and yield
yield returns the result but remembers where it left off. i.e used to maintain state in the func.
The state is suspended and resumed later to return a series of results later
3. scope - two ways besides default- global and non-local
by default all names are local to the func
global assign a name in the enclosing module
nonlocal is in v3.0 assigns a name in the scope of def - but can retain state - between successive calls
4. arguments
arguments are passed by reference
arguments are passed by position - unless you specify. i.e you can specify by -x=someval
arbitrary number of args can be passed by *pargs or **kargs
return values are not declared
################
def is a true executable statement. unlike other lang, def is not evaluated before. It is evaluated at runtime
this means it is the same as = statement. here a function object is created with a name.
The statements inside def are also evaluated later
Because of this you can have a def inside an if statement
if x:
    def func()
else:
    def func()
Thus you can have different implementation depending on the logic
'''
def times(x, y):
    return x*y
#call the function now
rv = times(2,3)
print('func called with number =>', rv)
rv = times('aa',3)
print('func called with string =>', rv)
#in python, you can achieve polymorphism as there is no strong typing. Args are matched and if they support
#the * expression,it will execute. if not, you get an error.




 
   
