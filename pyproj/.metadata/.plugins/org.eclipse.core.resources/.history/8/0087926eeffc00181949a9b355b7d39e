'''
Created on 07-Dec-2018

@author: avdhut
'''
'''
Exceptions
There are 4 statements related to exceptions
try/except - catch and recover from exceptions
try/finally - perform cleanup actions, whether exceptions occur or not
raise - trigger an exception
assert - conditionally trigger an exception
with/as - implement context managers, close resources
'''

def fetcher(obj, index):
    return obj[index]

#this catches a error and just prints it
# but if the exception is not raised, the program continues at the next statement after the try block
x = 'hello'
try:
    fetcher(x,6)
except IndexError:
    print('index is out of bounds')
print('continuing after catching exception') # this should be in line with the try clause

#raise exception using a raise clause
try:
    raise IndexError
except IndexError:
    print('caught the raised error')
'''
Built in and User defined exceptions
The above exception, IndexError,  was a built in exception
You can define user specific exceptions by extending the Exception super class
Finally block is executed whether an exception occurs or not. It is always executed
However if an exception occurs the control stops after the finally block. It does not proceeed to execute the 
next statement after the finally block 
Finally is used to close resources and provide a graceful exit
However for few objects, there is an alternative clause called with/as that performs resource closure
But this is supported only for few objects like File, etc 
'''
class AlreadyGotOneException(Exception): pass

def grail():
    raise AlreadyGotOneException

#try/except also supports a else clause
#else clause is entered only if exception does not occur
try:
    #grail()
    pass  #uncomment this to see teh else cluase in action
except AlreadyGotOneException:
    print('got user defined exception ')
else:
    print('else clause - no user exception')
finally:
    print('finally block always executed')
    
with open('datatp.txt', 'w') as file: #no need of finally clause. it closes the file
    file.write('hello\n')
    
    